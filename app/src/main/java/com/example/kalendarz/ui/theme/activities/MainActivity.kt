package com.example.kalendarz.ui.theme.activities

import android.app.Activity
import android.appwidget.AppWidgetManager
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.webkit.WebSettings
import android.webkit.WebView
import android.webkit.WebViewClient
import android.webkit.WebChromeClient
import android.webkit.ConsoleMessage
import android.webkit.JavascriptInterface
import android.webkit.GeolocationPermissions
import android.util.Log
import com.example.kalendarz.R
import com.example.kalendarz.ui.theme.widgets.RotationWidget
import android.content.pm.ActivityInfo
import android.Manifest
import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

class MainActivity : Activity() {
    private lateinit var webView: WebView
    private val LOCATION_PERMISSION_REQUEST = 1

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        webView = findViewById(R.id.webview)

        // Sprawd≈∫ i popro≈õ o uprawnienia
        checkLocationPermissions()

        setupWebView()
        webView.loadUrl("file:///android_asset/web/index.html")
    }

    private fun checkLocationPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED) {

            Log.d("MainActivity", "‚ùå Brak uprawnie≈Ñ lokalizacji - proszƒô o nie")

            ActivityCompat.requestPermissions(this,
                arrayOf(
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                ),
                LOCATION_PERMISSION_REQUEST)
        } else {
            Log.d("MainActivity", "‚úÖ Uprawnienia lokalizacji sƒÖ ju≈º przyznane")
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        when (requestCode) {
            LOCATION_PERMISSION_REQUEST -> {
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    Log.d("MainActivity", "‚úÖ U≈ºytkownik przyzna≈Ç uprawnienia lokalizacji")
                    // Od≈õwie≈º WebView je≈õli potrzeba
                    webView.reload()
                } else {
                    Log.d("MainActivity", "‚ùå U≈ºytkownik odm√≥wi≈Ç uprawnie≈Ñ lokalizacji")
                }
            }
        }
    }

    private fun setupWebView() {
        val webSettings: WebSettings = webView.settings

        // Podstawowe ustawienia
        webSettings.javaScriptEnabled = true
        webSettings.domStorageEnabled = true
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)

        // Geolokalizacja - KLUCZOWE USTAWIENIA!
        webSettings.setGeolocationEnabled(true)
        webSettings.setGeolocationDatabasePath(filesDir.path)

        // Network settings
        webSettings.allowContentAccess = true
        webSettings.allowFileAccess = true
        webSettings.allowFileAccessFromFileURLs = true
        webSettings.allowUniversalAccessFromFileURLs = true
        webSettings.blockNetworkImage = false
        webSettings.blockNetworkLoads = false
        webSettings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW
        webSettings.cacheMode = WebSettings.LOAD_DEFAULT
        webSettings.databaseEnabled = true
        webSettings.userAgentString = webSettings.userAgentString + " KalendarzRotacji/1.0"

        // JavaScript Interface
        webView.addJavascriptInterface(AndroidInterface(), "AndroidWidget")

        // WebViewClient
        webView.webViewClient = object : WebViewClient() {
            override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean {
                if (url?.contains("openweathermap.org") == true ||
                    url?.contains("api.nbp.pl") == true ||
                    url?.contains("weatherapi.com") == true) {
                    Log.d("MainActivity", "Pozwalam na API call: $url")
                    return false
                }
                return super.shouldOverrideUrlLoading(view, url)
            }

            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)
                Log.d("MainActivity", "‚úÖ Strona za≈Çadowana: $url")
            }
        }

        // WebChromeClient - OBS≈ÅUGA GEOLOKALIZACJI!
        webView.webChromeClient = object : WebChromeClient() {
            override fun onConsoleMessage(consoleMessage: ConsoleMessage?): Boolean {
                consoleMessage?.let { msg ->
                    val level = when(msg.messageLevel()) {
                        ConsoleMessage.MessageLevel.ERROR -> "ERROR"
                        ConsoleMessage.MessageLevel.WARNING -> "WARN"
                        ConsoleMessage.MessageLevel.DEBUG -> "DEBUG"
                        else -> "LOG"
                    }
                    Log.d("WebView_$level", "${msg.message()} [${msg.sourceId()}:${msg.lineNumber()}]")
                }
                return true
            }

            // KLUCZOWA FUNKCJA - obs≈Çuga geolokalizacji!
            override fun onGeolocationPermissionsShowPrompt(
                origin: String?,
                callback: GeolocationPermissions.Callback?
            ) {
                Log.d("MainActivity", "üåç ≈ªƒÖdanie uprawnie≈Ñ geolokalizacji dla: $origin")

                // Sprawd≈∫ czy aplikacja ma uprawnienia Android
                if (ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.ACCESS_FINE_LOCATION)
                    == PackageManager.PERMISSION_GRANTED) {

                    Log.d("MainActivity", "‚úÖ Android ma uprawnienia - zatwierdzam dla WebView")
                    callback?.invoke(origin, true, false)
                } else {
                    Log.d("MainActivity", "‚ùå Android nie ma uprawnie≈Ñ - odmawiam")
                    callback?.invoke(origin, false, false)
                }
            }

            override fun onGeolocationPermissionsHidePrompt() {
                Log.d("MainActivity", "üåç Ukrycie promptu geolokalizacji")
            }
        }

        // Enable debugging
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
            WebView.setWebContentsDebuggingEnabled(true)
        }
    }

    inner class AndroidInterface {
        @JavascriptInterface
        fun updateWidgetData(rotationDataJson: String) {
            Log.d("MainActivity", "üìä Otrzymano dane widget: $rotationDataJson")

            try {
                // Sprawd≈∫ czy JSON jest prawid≈Çowy
                val jsonObject = org.json.JSONObject(rotationDataJson)
                Log.d("MainActivity", "‚úÖ JSON jest prawid≈Çowy")
                Log.d("MainActivity", "  - currentDays: ${jsonObject.optString("currentDays")}")
                Log.d("MainActivity", "  - currentLabel: ${jsonObject.optString("currentLabel")}")
                Log.d("MainActivity", "  - nextDays: ${jsonObject.optString("nextDays")}")
                Log.d("MainActivity", "  - nextLabel: ${jsonObject.optString("nextLabel")}")

                saveDataForWidget(rotationDataJson)
            } catch (e: Exception) {
                Log.e("MainActivity", "‚ùå B≈ÇƒÖd parsowania JSON widgetu: ${e.message}")
            }
        }

        @JavascriptInterface
        fun logToAndroid(message: String) {
            Log.d("WebView_JS", "üì± $message")
        }

        @JavascriptInterface
        fun showToast(message: String) {
            runOnUiThread {
                android.widget.Toast.makeText(this@MainActivity, message, android.widget.Toast.LENGTH_SHORT).show()
            }
        }

        @JavascriptInterface
        fun testWidget() {
            Log.d("MainActivity", "üß™ Test widgetu wywo≈Çany z JavaScript")
            val testData = """{"currentDays":"TEST","currentLabel":"Test Label","nextDays":"123","nextLabel":"Test Next","lastUpdate":"${java.util.Date()}"}"""
            saveDataForWidget(testData)
        }
    }

    private fun saveDataForWidget(rotationDataJson: String) {
        Log.d("MainActivity", "üíæ Zapisujƒô dane widgetu...")

        val prefs = getSharedPreferences("rotation_data", Context.MODE_PRIVATE)
        val editor = prefs.edit()
        editor.putString("rotation_data", rotationDataJson)
        val success = editor.commit() // U≈ºyj commit() zamiast apply() dla natychmiastowego zapisu

        Log.d("MainActivity", "üíæ Zapis do SharedPreferences: ${if (success) "‚úÖ SUKCES" else "‚ùå B≈ÅƒÑD"}")

        // Sprawd≈∫ czy dane rzeczywi≈õcie siƒô zapisa≈Çy
        val savedData = prefs.getString("rotation_data", null)
        Log.d("MainActivity", "üîç Sprawdzam zapisane dane: $savedData")

        // Wymu≈õ aktualizacjƒô widgetu
        val appWidgetManager = android.appwidget.AppWidgetManager.getInstance(this)
        val widgetIds = appWidgetManager.getAppWidgetIds(
            android.content.ComponentName(this, com.example.kalendarz.ui.theme.widgets.RotationWidget::class.java)
        )

        Log.d("MainActivity", "üéØ Znaleziono ${widgetIds.size} aktywnych widget√≥w")

        if (widgetIds.isNotEmpty()) {
            val intent = android.content.Intent(this, com.example.kalendarz.ui.theme.widgets.RotationWidget::class.java)
            intent.action = android.appwidget.AppWidgetManager.ACTION_APPWIDGET_UPDATE
            intent.putExtra(android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_IDS, widgetIds)
            sendBroadcast(intent)

            Log.d("MainActivity", "üì° Broadcast wys≈Çany do widgetu")
        } else {
            Log.w("MainActivity", "‚ö†Ô∏è Brak aktywnych widget√≥w - dodaj widget na ekran g≈Ç√≥wny")
        }
    }

    override fun onBackPressed() {
        if (webView.canGoBack()) {
            webView.goBack()
        } else {
            super.onBackPressed()
        }
    }
}